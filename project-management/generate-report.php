<?php
// generate-report.php

require '../fpdf/fpdf.php'; // Ensure the path is correct
include '../includes/database.php'; // Ensure the path is correct

session_start();

// Ensure the user is logged in
if (!isset($_SESSION['user_id'])) {
    header("Location: ../index.php");
    exit();
}

// Retrieve project ID from query string
$proj_ID = isset($_GET['proj_ID']) ? $_GET['proj_ID'] : '';

// Validate project ID
if (empty($proj_ID)) {
    echo "Invalid project ID.";
    exit();
}

$db = ConnectDB();

// Function to handle SQL preparation and execution with error checking
function fetchData($db, $query, $param_type, $param_value) {
    $stmt = $db->prepare($query);
    if (!$stmt) {
        die("Prepare failed: (" . $db->errno . ") " . $db->error);
    }
    if ($param_type && $param_value) {
        $stmt->bind_param($param_type, $param_value);
    }
    if (!$stmt->execute()) {
        die("Execute failed: (" . $stmt->errno . ") " . $stmt->error);
    }
    $result = $stmt->get_result();
    if (!$result) {
        die("Get result failed: (" . $stmt->errno . ") " . $stmt->error);
    }
    return $result->fetch_all(MYSQLI_ASSOC);
}

// Fetch project data from the database
$projectQuery = "SELECT * FROM projects WHERE proj_ID = ?";
$projectResult = fetchData($db, $projectQuery, 's', $proj_ID);
$project = count($projectResult) > 0 ? $projectResult[0] : null;

if (!$project) {
    echo "No project details found.";
    exit();
}

// Fetch progress data
$query_progress = "SELECT * FROM progress WHERE proj_ID = ? ORDER BY prog_date DESC LIMIT 1";
$progress_result = fetchData($db, $query_progress, 's', $proj_ID);

// Fetch contract time extension data
$query_extension = "SELECT * FROM `contract-time-extension` WHERE proj_ID = ?";
$extension_result = fetchData($db, $query_extension, 's', $proj_ID);

// Function to format dates
function formatDate($date) {
    if ($date && $date !== '0000-00-00') {
        return date("F d, Y", strtotime($date));
    }
    return 'N/A';
}

// Function to safely retrieve data or return 'N/A'
function getValue($value) {
    return $value !== null && $value !== '' ? htmlspecialchars($value) : 'N/A';
}

// Initialize PDF with enhanced table handling
class PDF extends FPDF {
    // Header
    function Header() {
        // Path to the logo image
        $logoPath = '../images/dpwh-icon.png';

        // Check if the logo image exists
        if (!file_exists($logoPath)) {
            die("Error: Logo image not found at '$logoPath'. Please ensure the image exists and is accessible.");
        }

        // Define margin values
        $leftMargin = 10;
        $rightMargin = 10;

        // Logo
        $logoWidth = 20; // Reduced width of the logo
        $logoHeight = 20; // Reduced height of the logo
        $logoXPosition = $leftMargin; // Left margin
        $logoYPosition = 10; // Top margin

        $this->Image($logoPath, $logoXPosition, $logoYPosition, $logoWidth, $logoHeight);

        // Set font for header text
        $this->SetFont('Arial', 'B', 14);

        // Reset X position to margin
        $this->SetXY($leftMargin, $logoYPosition);

        // Centered Title
        $this->Cell(0, 7, 'Department of Public Works and Highways', 0, 1, 'C');
        $this->SetFont('Arial', '', 12);
        $this->Cell(0, 7, 'Second District Engineering Office', 0, 1, 'C');
        $this->Cell(0, 7, 'Payawin, Gubat, Sorsogon', 0, 1, 'C');

        // Draw line under header
        $lineY = $this->GetY() + 5;
        $this->Line($leftMargin, $lineY, $this->GetPageWidth() - $rightMargin, $lineY);
        $this->Ln(10);
    }

    // Footer
    function Footer() {
        // Position at 1.5 cm from bottom
        $this->SetY(-15);
        // Set font for footer
        $this->SetFont('Arial', 'I', 8);
        
        // Calculate width for left and right cells
        $pageWidth = $this->GetPageWidth() - $this->lMargin - $this->rMargin;
        $halfWidth = $pageWidth / 2;

        // Left side: Page X of Y
        $this->Cell($halfWidth, 10, 'Page ' . $this->PageNo() . ' of {nb}', 0, 0, 'L');

        // Right side: Generated by DPWH Monitoring System
        $this->Cell($halfWidth, 10, 'Generated by DPWH Monitoring System', 0, 0, 'R');
    }

    /**
     * AddTableHeader handles a single row of sub-headers.
     * @param array $subHeaders - Array of sub-header titles.
     * @param array $w - Array of column widths.
     * @param array $align - Array of alignments for each column.
     */
    function AddTableHeader($subHeaders, $w, $align = []) {
        // Set fill color for header (unchanged)
        $this->SetFillColor(100, 149, 237); // Cornflower Blue
        $this->SetDrawColor(0, 0, 0); // Black border color
        $this->SetFont('Arial', 'B', 10); // Bold font for header
        $this->SetTextColor(255, 255, 255); // White text

        // Calculate height based on number of header lines (assuming single line)
        $headerHeight = 8;

        // Draw each header cell with a border
        foreach ($subHeaders as $i => $header) {
            $this->Cell($w[$i], $headerHeight, $header, 1, 0, isset($align[$i]) ? $align[$i] : 'C', true);
        }
        $this->Ln();
    }

    /**
     * AddTableRowData handles word wrapping and dynamic row height.
     * Ensures that each cell's content aligns correctly within its column.
     * @param array $data - Array of cell data.
     * @param array $w - Array of column widths.
     * @param array $align - Array of alignments for each column.
    */
function AddTableRowData($data, $w, $align = []) {
    $this->SetFont('Arial', '', 12); // Adjusted font size
    $this->SetTextColor(0, 0, 0); // Black text

    // Define the new color #CBC6C4
    $rowColor = [203, 198, 196];

    // Calculate the maximum number of lines for the row
    $nb = 0;
    for ($i = 0; $i < count($data); $i++) {
        $nb = max($nb, $this->NbLines($w[$i], $data[$i]));
    }
    $h = 6 * $nb; // 6 is the line height

    // Issue a page break first if needed
    $this->CheckPageBreak($h);

    // Set fill color for the row
    $this->SetFillColor($rowColor[0], $rowColor[1], $rowColor[2]);

    // Set draw color for borders
    $this->SetDrawColor(0, 0, 0); // Black border

    // Draw cell borders and fill
    $x = $this->GetX();
    $y = $this->GetY();
    foreach ($data as $i => $cell) {
        $a = isset($align[$i]) ? $align[$i] : 'L'; // Default to left alignment
        $this->Rect($x, $y, $w[$i], $h, 'DF'); // Fill and Draw the cell with borders
        $this->MultiCell($w[$i], 6, $cell, 0, $a, false); // No additional border
        $x += $w[$i];
        $this->SetXY($x, $y);
    }

    // Move to the next line
    $this->Ln($h);
}


    /**
     * Compute the number of lines a MultiCell of width w will take
     * @param float $w - Width of the cell
     * @param string $txt - Text content
     * @return int - Number of lines
     */
    function NbLines($w, $txt) {
        // Calculate the number of lines a MultiCell of width w will take
        $cw = &$this->CurrentFont['cw'];
        if ($w == 0)
            $w = $this->w - $this->rMargin - $this->x;
        $wmax = ($w - 2 * $this->cMargin) * 1000 / $this->FontSize;
        $s = str_replace("\r", '', $txt);
        $nb = strlen($s);
        if ($nb > 0 and $s[$nb - 1] == "\n")
            $nb--;
        $sep = -1;
        $i = 0;
        $j = 0;
        $l = 0;
        $nl = 1;
        while ($i < $nb) {
            $c = $s[$i];
            if ($c == "\n") {
                $i++;
                $sep = -1;
                $j = $i;
                $l = 0;
                $nl++;
                continue;
            }
            if ($c == ' ')
                $sep = $i;
            $l += isset($cw[$c]) ? $cw[$c] : 0;
            if ($l > $wmax) {
                if ($sep == -1) {
                    if ($i == $j)
                        $i++;
                } else
                    $i = $sep + 1;
                $sep = -1;
                $j = $i;
                $l = 0;
                $nl++;
            } else
                $i++;
        }
        return $nl;
    }

    function CheckPageBreak($h) {
        if ($this->GetY() + $h > $this->PageBreakTrigger)
            $this->AddPage($this->CurOrientation);
    }

    /**
     * Add Subsection Tables
     * @param string $title - Title of the subsection
     * @param array $subHeaders - Sub-headers for the table
     * @param array $data - Data rows for the table
     * @param array $w - Column widths
     * @param array $align - Column alignments
     */
    function AddSubsectionTable($title, $subHeaders, $data, $w, $align = []) {
        // Add section title
        $this->SetFont('Arial', 'B', 14);
        $this->SetTextColor(0, 0, 0);
        $this->Cell(0, 10, $title, 0, 1, 'L');

        // Add table headers
        $this->AddTableHeader($subHeaders, $w, $align);

        // Add table data
        foreach ($data as $row) {
            $this->AddTableRowData($row, $w, $align);
        }

        $this->Ln(5);
    }
}

/**
 * Function to Add Subsections as Tables with Separate Sub-Headers
 * @param PDF $pdf - FPDF instance
 * @param string $title - Section title
 * @param array $subHeaders - Array containing the sub-header titles
 * @param array $data - Array of data rows
 * @param array $w - Array of column widths
 * @param array $align - Array of alignments for each column
 */
function addSubsectionTable($pdf, $title, $subHeaders, $data, $w, $align = []) {
    $pdf->AddSubsectionTable($title, $subHeaders, $data, $w, $align);
}

// Prepare project data for table display
$projectData = [
    ['field' => 'Project ID', 'detail' => getValue($project['proj_ID'])],
    ['field' => 'Project Name', 'detail' => getValue($project['proj_cont_name'])],
    ['field' => 'Description', 'detail' => getValue($project['proj_description'])],
    ['field' => 'Original Duration', 'detail' => getValue($project['proj_cont_duration']) . ' days'],
    ['field' => 'Original Expiry Date', 'detail' => formatDate($project['proj_expiry_date'])],
];

// Calculate revised expiry date if there are contract time extensions
if ($extension_result && count($extension_result) > 0) {
    $extension = $extension_result[0];
    $new_expiry = date('F d, Y', strtotime($project['proj_expiry_date'] . ' + ' . $extension['cte_ext_days'] . ' days'));
    $projectData[] = ['field' => 'Revised Duration', 'detail' => getValue($project['proj_cont_duration'] + $extension['cte_ext_days']) . ' days'];
    $projectData[] = ['field' => 'Revised Expiry Date', 'detail' => $new_expiry];
}

// Create PDF
$pdf = new PDF();
$pdf->AliasNbPages(); // Needed for total page numbers
$pdf->SetMargins(10, 10, 10); // Set left, top, and right margins to 10 units
$pdf->AddPage();
$pdf->SetAutoPageBreak(true, 20);

// Add Project Table
$pdf->SetFont('Arial', 'B', 16);
$pdf->Cell(0, 10, 'Project Data', 0, 1, 'C');
$pdf->Ln(2); // Small space after title

// Prepare data for Project Table
$projectTableData = [];
foreach ($projectData as $item) {
    $projectTableData[] = [$item['field'], $item['detail']];
}

// Define column widths (Total = 190)
$w_project = [60, 130];

// Define alignment array
$align_project = ['C', 'C']; // Center alignment for headers

// Define sub-headers
$subHeaders_project = ['Field', 'Details'];

// Add Project Details table
addSubsectionTable(
    $pdf,
    'Project Details',
    $subHeaders_project,
    $projectTableData,
    $w_project,
    $align_project
);

// ---------------------- Progress Report Section ----------------------
$pdf->Ln(5);
$pdf->SetFont('Arial', 'B', 16);
$pdf->Cell(0, 10, 'Progress Report', 0, 1, 'C');
$pdf->Ln(2); // Small space after title

$progressData = [];
if ($progress_result && count($progress_result) > 0) {
    foreach ($progress_result as $progress) {
        $progressData[] = [
            getValue(formatDate($progress['prog_date'])),
            getValue($progress['prog_percentage']) . '%',
            getValue($progress['prog_desc']),
            getValue($progress['prog_issue']),
        ];
    }
} else {
    // Add a row with placeholders to maintain column structure
    $progressData[] = ["No progress records found.", "", "", ""];
}

// Define column headers and widths
$subHeaders_progress = ['Date', 'Percentage', 'Description', 'Issue'];
$w_progress = [40, 30, 80, 40];
$align_progress = ['C', 'C', 'L', 'L'];

// Add Progress Report table
addSubsectionTable(
    $pdf,
    'Progress Report',
    $subHeaders_progress,
    $progressData,
    $w_progress,
    $align_progress
);

// ---------------------- Progress Image Section ----------------------
if ($progress_result && count($progress_result) > 0) {
    $progress = $progress_result[0];
    if (!empty($progress['prog_image']) && file_exists('../uploads/progress-images/' . $progress['prog_image'])) {
        $imagePath = '../uploads/progress-images/' . $progress['prog_image'];
        $pdf->Ln(5);
        $pdf->SetFont('Arial', 'B', 14);
        $pdf->Cell(0, 10, 'Progress Image', 0, 1, 'C');
        $pdf->Image($imagePath, 20, $pdf->GetY(), 170); // Adjust positioning and size as needed
    }
}

// ---------------------- Output the PDF ----------------------
$pdf->AliasNbPages();
$pdf->Output('I', "Project_Report_{$proj_ID}.pdf"); // 'I' for inline display in browser
?>
