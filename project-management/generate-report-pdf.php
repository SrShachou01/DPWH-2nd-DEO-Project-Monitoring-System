<?php
require '../fpdf/fpdf.php'; // Include the FPDF library
include '../includes/database.php'; // Include the database connection

session_start();


// Temporarily enable error display for debugging
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Keep logging errors
ini_set('log_errors', 1);
ini_set('error_log', '../pages/report.txt');



// Ensure the user is logged in
if (!isset($_SESSION['user_id'])) {
    header("Location: ../index.php");
    exit();
}

// Retrieve project ID from query string or filter
$proj_status = isset($_GET['proj_status']) ? $_GET['proj_status'] : 'All';
$report_type = isset($_GET['report_type']) ? $_GET['report_type'] : 'Daily';

$db = ConnectDB();

// Query for project statistics (total projects, ongoing, not yet started, completed, suspended)
$summary_query = "SELECT 
    COUNT(*) AS total_projects,
    SUM(CASE WHEN proj_status = 'Ongoing' THEN 1 ELSE 0 END) AS ongoing,
    SUM(CASE WHEN proj_status = 'Not Yet Started' THEN 1 ELSE 0 END) AS not_started,
    SUM(CASE WHEN proj_status = 'Completed' THEN 1 ELSE 0 END) AS completed,
    SUM(CASE WHEN proj_status = 'Suspended' THEN 1 ELSE 0 END) AS suspended
FROM projects WHERE proj_isDeleted = 0";

$summary_result = $db->query($summary_query);
$summary = $summary_result->fetch_assoc();

// Fetch detailed project data
$projects_query = "SELECT 
    p.proj_ID, 
    p.proj_cont_name, 
    p.proj_cont_loc, 
    p.proj_progress, 
    p.proj_description, 
    p.proj_status, 
    p.proj_NOA, 
    p.proj_expiry_date, 
    GROUP_CONCAT(c.cont_name SEPARATOR ', ') AS contractors 
FROM projects p
LEFT JOIN project_contractors pc ON p.proj_ID = pc.proj_ID 
LEFT JOIN contractors c ON pc.cont_ID = c.cont_ID 
WHERE p.proj_isDeleted = 0";
if ($proj_status !== 'All') {
    $projects_query .= " AND p.proj_status = '$proj_status'";
}
$projects_query .= " GROUP BY p.proj_ID";

$projects_result = $db->query($projects_query);
// Dynamically generate the report title
$report_title = ucfirst(strtolower($report_type)) . " project report (" . strtolower($proj_status) . " projects)";

// Current date
$current_date = date('F d, Y'); // Example format: March 18, 2025


// Initialize PDF
class PDF extends FPDF {
    // Header
    function Header() {
    
        // Path to the logo image
        $logoPath = '../images/dpwh-icon.png';
    
        // Check if the logo image exists
        if (!file_exists($logoPath)) {
            die("Error: Logo image not found at '$logoPath'. Please ensure the image exists and is accessible.");
        }
    
        // Define margin values
        $leftMargin = 10;
        $rightMargin = 10;
    
        // Logo
        $logoWidth = 20; // Reduced width of the logo
        $logoHeight = 20; // Reduced height of the logo
        $logoXPosition = $leftMargin; // Left margin
        $logoYPosition = 10; // Top margin
    
        $this->Image($logoPath, $logoXPosition, $logoYPosition, $logoWidth, $logoHeight);
    
        // Set font for header text
        $this->SetFont('Arial', 'B', 14);
    
        // Reset X position to margin
        $this->SetXY($leftMargin, $logoYPosition);
    
        // Centered Title
        $this->Cell(0, 7, 'Department of Public Works and Highways', 0, 1, 'C');
        $this->SetFont('Arial', '', 12);
        $this->Cell(0, 7, 'Second District Engineering Office', 0, 1, 'C');
        $this->Cell(0, 7, 'Payawin, Gubat, Sorsogon', 0, 1, 'C');
    
        // Draw line under header
        $lineY = $this->GetY() + 5;
        $this->Line($leftMargin, $lineY, $this->GetPageWidth() - $rightMargin, $lineY);
        $this->Ln(10);
    
        // Dynamic Report Title
        global $report_title, $current_date; // Access the variables from the global scope
        $this->SetFont('Arial', 'B', 14);
        $this->Cell(0, 10, $report_title, 0, 1, 'C');
        $this->Cell(0, 10, 'Generated on: ' . $current_date, 0, 1, 'C');
        $this->Ln(10);
    }


    // Footer
    function Footer() {
        // Position at 1.5 cm from bottom
        $this->SetY(-15);
        // Set font for footer
        $this->SetFont('Arial', 'I', 8);
        
        // Calculate width for left and right cells
        $pageWidth = $this->GetPageWidth() - $this->lMargin - $this->rMargin;
        $halfWidth = $pageWidth / 2;

        // Left side: Page X of Y
        $this->Cell($halfWidth, 10, 'Page ' . $this->PageNo() . ' of {nb}', 0, 0, 'L');

        // Right side: Generated by DPWH Monitoring System
        $this->Cell($halfWidth, 10, 'Generated by DPWH Monitoring System', 0, 0, 'R');
    }

    // Function to create a two-column table (Title - Detail)
    function CreateTitleDetailTable($data) {
        $this->SetFont('Arial', 'B', 12);
        $column_widths = [60, 130]; // Widths for title and details columns
        foreach ($data as $row) {
            // Title and detail in two columns
            $this->Cell($column_widths[0], 7, $row['title'], 1, 0, 'L');
            $this->MultiCell($column_widths[1], 7, $row['detail'], 1, 'L');
        }
        $this->Ln(); // Add line break after each project's details
    }
}

// Create PDF instance
$pdf = new PDF();
$pdf->AddPage();

// Page 1: Summary Report
$pdf->SetFont('Arial', 'B', 12);
$pdf->Cell(0, 10, 'Project Summary', 0, 1, 'L');
$pdf->SetFont('Arial', '', 12);
$pdf->Cell(50, 7, "Total Projects: " . $summary['total_projects']);
$pdf->Ln();
$pdf->Cell(50, 7, "Ongoing: " . $summary['ongoing']);
$pdf->Ln();
$pdf->Cell(50, 7, "Not Yet Started: " . $summary['not_started']);
$pdf->Ln();
$pdf->Cell(50, 7, "Completed: " . $summary['completed']);
$pdf->Ln();
$pdf->Cell(50, 7, "Suspended: " . $summary['suspended']);
$pdf->Ln(10);

// Page 2: Detailed Project Report
$pdf->SetFont('Arial', 'B', 20);


$pdf->Cell(0, 10, 'Project List', 0, 1, 'C');
// Get the total number of projects
$total_projects = $projects_result->num_rows;

// Initialize project counter
$project_counter = 0;
// Loop through each project and display its details
while ($row = $projects_result->fetch_assoc()) {
    $project_counter++; // Increment the counter
    $project_data = []; // Clear previous project data for new project
    // Page 2: Detailed Project Report
    $pdf->SetFont('Arial', 'B', 14);
    $pdf->Cell(0, 10, 'Project Details', 0, 1, 'L');
    // Prepare the data for each project in a two-column format
    $project_data[] = ['title' => 'Project ID', 'detail' => $row['proj_ID']];
    $project_data[] = ['title' => 'Project Name', 'detail' => $row['proj_cont_name']];
    $project_data[] = ['title' => 'Location', 'detail' => $row['proj_cont_loc']];
    $project_data[] = ['title' => 'Contractors', 'detail' => $row['contractors']];
    $project_data[] = ['title' => 'Start Date', 'detail' => $row['proj_NOA']];
    $project_data[] = ['title' => 'End Date', 'detail' => $row['proj_expiry_date']];
    $project_data[] = ['title' => 'Status', 'detail' => $row['proj_status']];
    
    // Create the two-column table for project details
    $pdf->CreateTitleDetailTable($project_data);

    // Fetch progress data for the current project
    $progress_query = "SELECT prog_date, prog_desc, prog_percentage, prog_issue FROM progress WHERE proj_ID = '{$row['proj_ID']}' AND prog_status = 'Approved' ORDER BY prog_date ASC";
    $progress_result = $db->query($progress_query);
    
    // Check if there is progress data for this project
    if ($progress_result->num_rows > 0) {
        // Create a title for the progress section with the Project ID
        $pdf->SetFont('Arial', 'B', 12);
        $pdf->Cell(0, 10, 'Project Progress for ' . $row['proj_ID'], 0, 1, 'L');
        
        // Loop through progress entries and display them in a table format
        while ($progress_row = $progress_result->fetch_assoc()) {
            // Prepare progress data in two-column format
            $progress_data = [];
            $progress_data[] = ['title' => 'Progress Date', 'detail' => $progress_row['prog_date']];
            $progress_data[] = ['title' => 'Description', 'detail' => $progress_row['prog_desc']];
            $progress_data[] = ['title' => 'Progress Percentage', 'detail' => $progress_row['prog_percentage'] . '%'];
            $progress_data[] = ['title' => 'Issue', 'detail' => $progress_row['prog_issue']];
            
            // Create the two-column table for progress
            $pdf->CreateTitleDetailTable($progress_data);
        }
    } else {
        $pdf->SetFont('Arial', 'B', 12);
        $pdf->Cell(0, 10, 'Project Progress for ' . $row['proj_ID'], 0, 1, 'L');
        $pdf->SetFont('Arial', 'I', 12);
        $pdf->Cell(0, 10, 'No progress updates available for this project.', 0, 1, 'L');
    }



$pdf->SetFont('Arial', 'B', 12);
$pdf->Cell(0, 10, 'Documents for ' . $row['proj_ID'], 0, 1, 'L');
// List of document types with their respective table names
$documents_data = [
    'contract-work-suspension' => 'Contract Work Suspension',
    'contract-work-resumption' => 'Contract Work Resumption',
    'contract-time-extension' => 'Contract Time Extension',
    'monthly-time-suspension-report' => 'Monthly Time Suspension Report',
    'variation-orders' => 'Variation Orders',
    'final-completion' => 'Final Completion',
    'other-documents' => 'Other Documents'
];

// Flag to check if any documents are found
$documents_found = false;

// Loop through each document type
foreach ($documents_data as $table => $title) {
    // Wrap table names in backticks to handle hyphens correctly
    $table_name = "`$table`"; // This ensures the table name is treated correctly
    
    // Fetch documents data for the current table
    $document_query = "SELECT * FROM $table_name WHERE proj_ID = '{$row['proj_ID']}'";
    $document_result = $db->query($document_query);

    // Check if there are any documents for this table
    if ($document_result->num_rows > 0) {
        $documents_found = true; // Set the flag to true if documents are found
        
        // Set the title for the documents section
        $pdf->SetFont('Arial', 'B', 12);
        $pdf->Cell(0, 10, $title . ' for ' . $row['proj_ID'], 0, 1, 'L');
        
        // Loop through document entries and display them in a two-column table format
        while ($document_row = $document_result->fetch_assoc()) {
            $document_data = []; // Clear previous document data for each entry

            // Prepare data based on the table being fetched
            if ($table == 'contract-work-suspension') {
                $document_data[] = ['title' => 'Suspension Date', 'detail' => $document_row['cws_lr_date']];
                $document_data[] = ['title' => 'Reason', 'detail' => $document_row['cws_reason']];
                $document_data[] = ['title' => 'Suspension Days', 'detail' => $document_row['cws_susp_days']];
                $document_data[] = ['title' => 'Approved Date', 'detail' => $document_row['cws_approved_date']];
                $document_data[] = ['title' => 'Expiry Date', 'detail' => $document_row['cws_expiry_date']];
            }
            // For 'contract-work-resumption'
            if ($table == 'contract-work-resumption') {
                $document_data[] = ['title' => 'Resumption Date', 'detail' => $document_row['cwr_lr_date']];
                $document_data[] = ['title' => 'Reason', 'detail' => $document_row['cwr_reason']];
                $document_data[] = ['title' => 'Suspension Days', 'detail' => $document_row['cwr_susp_days']];
                $document_data[] = ['title' => 'Approved Date', 'detail' => $document_row['cwr_approved_date']];
            }
            // For 'contract-time-extension'
            if ($table == 'contract-time-extension') {
                $document_data[] = ['title' => 'Extension Date', 'detail' => $document_row['cte_lr_date']];
                $document_data[] = ['title' => 'Reason', 'detail' => $document_row['cte_reason']];
                $document_data[] = ['title' => 'Extension Days', 'detail' => $document_row['cte_ext_days']];
                $document_data[] = ['title' => 'Approved Date', 'detail' => $document_row['cte_approved_date']];
            }
            // For 'monthly-time-suspension-report'
            if ($table == 'monthly-time-suspension-report') {
                $document_data[] = ['title' => 'Suspension Date', 'detail' => $document_row['mtsr_lr_date']];
                $document_data[] = ['title' => 'Reason', 'detail' => $document_row['mtsr_reason']];
                $document_data[] = ['title' => 'Suspension Days', 'detail' => $document_row['mtsr_susp_days']];
                $document_data[] = ['title' => 'Approved Date', 'detail' => $document_row['mtsr_approved_date']];
            }
            // For 'variation-orders'
            if ($table == 'variation-orders') {
                $document_data[] = ['title' => 'Order Date', 'detail' => $document_row['vo_date']];
                $document_data[] = ['title' => 'Added Amount', 'detail' => $document_row['vo_add_amt']];
                $document_data[] = ['title' => 'Revised Cost', 'detail' => $document_row['vo_revised_cost']];
                $document_data[] = ['title' => 'Extension Days', 'detail' => $document_row['vo_ext_days']];
                $document_data[] = ['title' => 'Expiry Date', 'detail' => $document_row['vo_expiry_date']];
            }
            // For 'final-completion'
            if ($table == 'final-completion') {
                $document_data[] = ['title' => 'Completion Type', 'detail' => $document_row['fc_type']];
                $document_data[] = ['title' => 'Approval Date', 'detail' => $document_row['fc_approved_date']];
                $document_data[] = ['title' => 'Uploaded Date', 'detail' => $document_row['fc_uploaded_date']];
            }
            // For 'other-documents'
            if ($table == 'other-documents') {
                $document_data[] = ['title' => 'Document Title', 'detail' => $document_row['od_title_name']];
                $document_data[] = ['title' => 'Attachment Type', 'detail' => $document_row['od_attachment_type']];
                $document_data[] = ['title' => 'Uploaded Date', 'detail' => $document_row['od_uploaded_date']];
            }

            // Add document data to the table
            $pdf->CreateTitleDetailTable($document_data);
            $pdf->Ln(5); // Add space after each document entry
        }
    }
}

    // If no documents were found, display the "No documents available" message
    if (!$documents_found) {
        $pdf->SetFont('Arial', 'I', 12);
        $pdf->Cell(0, 10, 'No documents available for this project.', 0, 1, 'L');
    }
    // Add a page break for all projects except the last one
    if ($project_counter < $total_projects) {
        $pdf->AddPage();
    }
}

// Output PDF
$pdf->Output('I', 'Project_Report.pdf');

?>